"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nested = exports.transform = exports.mapTo = exports.scope = exports.include = exports.dto = void 0;
require("reflect-metadata");
const const_1 = require("./const");
const dto = () => {
    return (target) => {
        Reflect.defineMetadata(const_1.DTO_METADATA, true, target);
    };
};
exports.dto = dto;
const include = () => {
    return (target, propertyKey) => {
        const properties = Reflect.getMetadata(const_1.PROPERTIES_METADATA, target.constructor) || [];
        if (!properties.includes(propertyKey)) {
            Reflect.defineMetadata(const_1.PROPERTIES_METADATA, [...properties, propertyKey], target.constructor);
        }
    };
};
exports.include = include;
const scope = (...scopes) => {
    return (target, propertyKey) => {
        const definedScopes = Reflect.getMetadata(const_1.SCOPE_METADATA, target.constructor, propertyKey) || [];
        Reflect.defineMetadata(const_1.SCOPE_METADATA, [...definedScopes, ...scopes], target.constructor, propertyKey);
    };
};
exports.scope = scope;
const mapTo = (to) => {
    return (target, propertyKey) => {
        Reflect.defineMetadata(const_1.MAP_TO_METADATA, to, target.constructor, propertyKey);
    };
};
exports.mapTo = mapTo;
const transform = (transformer) => {
    return (target, propertyKey) => {
        const definedTransformers = Reflect.getMetadata(const_1.TRANSFORM_METADATA, target.constructor, propertyKey) || [];
        Reflect.defineMetadata(const_1.TRANSFORM_METADATA, [...definedTransformers, transformer], target.constructor, propertyKey);
    };
};
exports.transform = transform;
const nested = (accessor, many = false) => {
    return (target, propertyKey) => {
        const meta = {
            accessor,
            many,
        };
        Reflect.defineMetadata(const_1.NESTED_METADATA, meta, target.constructor, propertyKey);
    };
};
exports.nested = nested;
