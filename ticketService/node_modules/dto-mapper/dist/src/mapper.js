"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mapper = void 0;
class Mapper {
    constructor(config) {
        this.config = config;
        this.fieldMap = config.fields.reduce((p, v) => ({
            ...p,
            [v.from]: v,
        }), {});
        this.reverseFieldMap = config.fields.reduce((p, v) => ({
            ...p,
            [v.to]: v,
        }), {});
    }
    deserialize(input, scope) {
        let inflating;
        if (this.config.entityConstructor) {
            inflating = new this.config.entityConstructor();
        }
        else {
            inflating = {};
        }
        for (const field of this.config.fields) {
            if (field.scopes == null || field.scopes.includes(scope)) {
                const value = input[field.from];
                if (field.transformer != null) {
                    inflating[field.to] = field.transformer.fromDto(value);
                }
                else {
                    inflating[field.to] = value;
                }
            }
        }
        return inflating;
    }
    serialize(input, scope) {
        let inflating;
        if (this.config.dtoConstructor) {
            inflating = new this.config.dtoConstructor();
        }
        else {
            inflating = {};
        }
        for (const field of this.config.fields) {
            if (field.scopes == null || field.scopes.includes(scope)) {
                const value = input[field.to];
                if (field.transformer != null) {
                    inflating[field.from] = field.transformer.toDto(value);
                }
                else {
                    inflating[field.from] = value;
                }
            }
        }
        return inflating;
    }
    deserializeField(key, input, scope) {
        const field = this.fieldMap[key];
        let value;
        if (field.transformer != null) {
            value = field.transformer.fromDto(input);
        }
        else {
            value = input;
        }
        return {
            key: field.to,
            value,
        };
    }
    serializeField(key, input, scope) {
        const field = this.reverseFieldMap[key];
        let value;
        if (field.transformer != null) {
            value = field.transformer.toDto(input);
        }
        else {
            value = input;
        }
        return {
            key: field.from,
            value,
        };
    }
}
exports.Mapper = Mapper;
